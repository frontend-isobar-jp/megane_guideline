!function(){function e(t,n,i){function r(s,l){if(!n[s]){if(!t[s]){var a="function"==typeof require&&require;if(!l&&a)return a(s,!0);if(o)return o(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=n[s]={exports:{}};t[s][0].call(u.exports,function(e){var n=t[s][1][e];return r(n||e)},u,u.exports,e,t,n,i)}return n[s].exports}for(var o="function"==typeof require&&require,s=0;s<i.length;s++)r(i[s]);return r}return e}()({1:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=e("../libs/j_utility");n["default"]=function(){var e=document.querySelector(".j-pagetop"),t=100,n="is-show",r=!1,o=function(){return window.pageYOffset},s=function(){o()>t?(r||(0,i.AddClass)(e,n),r=!0):(r&&(0,i.RemoveClass)(e,n),r=!1)};e&&(document.addEventListener("scroll",function(){s()}),document.addEventListener("load",function(){s()}))}},{"../libs/j_utility":5}],2:[function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(n,"__esModule",{value:!0});var r=e("../libs/j_accordion_es"),o=i(r),s=e("../libs/j_getIncludes_es"),l=i(s),a=e("./_show_pagetop"),c=i(a),u=function(){var e=location.pathname.split("/guideline")[0],t=(new o["default"](".j-accordion",{toggleSpeed:100}),function(){for(var t=document.getElementById("header"),n=t.getElementsByTagName("img"),i=t.getElementsByTagName("a"),r=0;r<i.length;r++){var o=i[r].href;o.indexOf("megane-template.com")===-1&&(i[r].href=e+o.split(location.origin)[1])}for(var r=0;r<n.length;r++){var s=n[r].src;n[r].src=e+s.split(location.origin)[1]}}),n=function(){(0,c["default"])()};new l["default"]("#header",e+"/guideline/assets/include/header.html",t),new l["default"]("#footer",e+"/guideline/assets/include/footer.html",n)};n["default"]=u},{"../libs/j_accordion_es":3,"../libs/j_getIncludes_es":4,"./_show_pagetop":1}],3:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=function(){function e(t,n){i(this,e),this.selector=t,this.accordion=document.querySelectorAll(this.selector),null==n&&(n={}),this.toggleSpeed=n.toggleSpeed?n.toggleSpeed:1,this.btnElm=n.btnElm?n.btnElm:".j-accordion_btn",this.detailElm=n.detailElm?n.detailElm:".j-accordion_detail",this.OpenEnd=function(){},this.CloseEnd=function(){},this.clickFlag=!1,this.accordion[0]&&this.Init()}return r(e,[{key:"Init",value:function(){var e=this,t="overflow: hidden;";t+="transition: height "+this.toggleSpeed/1e3+"s ;",t+="-webkit-transition: height "+this.toggleSpeed/1e3+"s ;";for(var n=0;n<this.accordion.length;n++)for(var i=this.accordion[n].querySelectorAll(this.detailElm),r=this.accordion[n].querySelectorAll(this.btnElm),o=0;o<r.length;o++)i[o]&&(i[o].style.cssText=t,this.HasClass(i[o],"active")||(i[o].style.height="0px",i[o].style.display="none")),r[o].addEventListener("click",function(t){t.preventDefault(),e.Toggle(t)})}},{key:"Toggle",value:function(e){if(!this.accordion[0])return console.error(this.selector+": Not Found"),!1;var t=e.currentTarget?e.currentTarget:document.querySelectorAll(e)[0];this.HasClass(t,"active")?this.clickFlag||this.Close(e):this.clickFlag||this.Open(e)}},{key:"Open",value:function(e){var t=this;if(!this.accordion[0])return console.error(this.selector+": Not Found"),!1;this.clickFlag=!0;var n=e.currentTarget?e.currentTarget:document.querySelectorAll(e)[0],i=this.GetParent(n,this.selector),r=Array.prototype.indexOf.call(i.querySelectorAll(this.btnElm),n),o=i.querySelectorAll(this.detailElm)[r],s=function l(){t.clickFlag=!1,t.OpenEnd(r),o.style.height=null,o.removeEventListener("transitionend",l)};this.AddClass(n,"active"),this.AddClass(o,"active"),o.style.display="block",setTimeout(function(){o.style.height=o.scrollHeight+"px"},100),this.accordion[0].classList?o.addEventListener("transitionend",s,!1):this.clickFlag=!1}},{key:"Close",value:function(e){var t=this;if(!this.accordion[0])return console.error(this.selector+": Not Found"),!1;this.clickFlag=!0;var n=e.currentTarget?e.currentTarget:document.querySelectorAll(e)[0],i=this.GetParent(n,this.selector),r=Array.prototype.indexOf.call(i.querySelectorAll(this.btnElm),n),o=i.querySelectorAll(this.detailElm)[r],s=function l(){t.clickFlag=!1,t.CloseEnd(r),n.style.pointerEvents="inherit",o.style.display="none",o.removeEventListener("transitionend",l)};this.RemoveClass(n,"active"),this.RemoveClass(o,"active"),o.style.height=o.scrollHeight+"px",setTimeout(function(){o.style.height="0px"},100),this.accordion[0].classList?o.addEventListener("transitionend",s,!1):(o.style.display="none",this.clickFlag=!1)}},{key:"CloseIgnoreThis",value:function(e){function t(e){s[e].classList.remove("active"),setTimeout(function(){s[e].style.height="0px"},100)}if(!this.accordion[0])return console.error(this.selector+": Not Found"),!1;for(var n=e,i=this.GetParent(n,this.selector),r=Array.prototype.indexOf.call(i.querySelectorAll(this.btnElm),n),o=i.querySelectorAll(this.btnElm),s=i.querySelectorAll(this.detailElm),l=0;l<o.length;l++)l!=r&&(o[l].classList.remove("active"),t(l))}},{key:"GetParent",value:function(e,t){var n=e,i=0,r=void 0;for(r=t.split(".")[1]?t.split(".")[1]:t.split("#")[1]?t.split("#")[1]:t;i<100&&(n=n.parentNode,n.tagName.toLowerCase()!=r);){if(n.className){if(n.className.match(r))break}else if(n.id&&n.id.match(r))break;i++}return n}},{key:"AddClass",value:function(e,t){e.classList?e.classList.add(t):e.className+=" "+t}},{key:"RemoveClass",value:function(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")}},{key:"HasClass",value:function(e,t){var n=!1;return e.classList?e.classList.contains(t)&&(n=!0):new RegExp("(^| )"+t+"( |$)","gi").test(e.className)&&(n=!0),n}}]),e}();n["default"]=o},{}],4:[function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),o=function(){function e(t,n,r){i(this,e),this.id=document.getElementById(t.split("#")[1]),this.path=n,this.func=null!=r?r:function(){},this.getHtml(this.id,this.path,this.func)}return r(e,[{key:"getHtml",value:function(e,t,n){var i=this,r=new XMLHttpRequest;r.open("GET",t,!0),r.onload=function(t){4===r.readyState&&(200===r.status?i.id&&(e.innerHTML=r.responseText,n()):alert("通信エラーが発生しました。\n恐れ入りますが、時間をおいてもう一度送信してください。"))},r.onerror=function(e){alert("通信エラーが発生しました。\n恐れ入りますが、時間をおいてもう一度送信してください。")},r.send(null)}}]),e}();n["default"]=o},{}],5:[function(t,n,i){"use strict";Object.defineProperty(i,"__esModule",{value:!0});var r=function(e,t){e.classList?e.classList.add(t):e.className+=" "+t},o=function(e,t){e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\b)"+t.split(" ").join("|")+"(\\b|$)","gi")," ")},s=function(t,n){var i=!1;return t.classList?t.classList.contains(n)&&(i=!0):new RegExp("(^| )"+n+"( |$)","gi").test(e.target.className)&&(i=!0),i},l=function(e,t){var n="";for(var i in t)n+=""+i+":"+t[i]+"; ";e.style.cssText=n},a=function(e,t){var n,i=e,r=0;for(n=t.split(".")[1]?t.split(".")[1]:t.split("#")[1]?t.split("#")[1]:t;r<100&&(i=i.parentNode,i.tagName.toLowerCase()!=n);){if(i.className){if(i.className.match(n))break}else if(i.id&&i.id.match(n))break;r++}return i},c=function(e,t){var n=Array.prototype.filter.call(e.parentNode.children,function(n,i){for(var r=e.parentNode.querySelectorAll(t),o=null,i=0;i<r.length;i++)n===r[i]&&(o=r[i]);return n!==e&&n===o});return 0!=n.length?n:null},u=function(e){var t=e.getBoundingClientRect();return{top:t.top+window.pageYOffset-document.documentElement.clientTop,left:t.left+window.pageXOffset-document.documentElement.clientLeft}},d=function(e){var t=window.getComputedStyle(e),n=e.offsetHeight,i=parseFloat(t.borderTopWidth),r=parseFloat(t.borderBottomWidth),o=parseFloat(t.paddingTop),s=parseFloat(t.paddingBottom),l={height:n,bordertop:i,borderBottom:r,paddingTop:o,paddingBottom:s,outerHeight:n+i+r+o+s};return l},f=function(e){var t=window.getComputedStyle(e),n=e.offsetWidth,i=parseFloat(t.borderLeftWidth),r=parseFloat(t.borderRightWidth),o=parseFloat(t.paddingLeft),s=parseFloat(t.paddingRight),l={width:n,borderLeft:i,borderRight:r,paddingLeft:o,paddingRight:s,outerWidth:n+i+r+o+s};return l},h=function(e,t){var n=!1,i=t.split(".")[1]?t.split(".")[1]:t.split("#")[1];return e.classList?e.classList.contains(i)&&(n=!0):new RegExp("(^| )"+i+"( |$)","gi").test(e.className)&&(n=!0),e.id==i&&(n=!0),n};i.AddClass=r,i.RemoveClass=o,i.HasClass=s,i.SetCss=l,i.GetParents=a,i.GetSiblings=c,i.Not=h,i.GetOffset=u,i.GetHeightData=d,i.GetWidthData=f},{}],6:[function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}var r=e("./common/common"),o=i(r),s=function(){(0,o["default"])()};s()},{"./common/common":2}]},{},[6]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
